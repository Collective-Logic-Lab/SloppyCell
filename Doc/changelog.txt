SloppyCell Changelog
--------------------

.. topic:: In CVS

  - Clean up of dynamic functions (rng7)
    
    Dyanmic function code is now much cleaner. Explicit calls to net.compile()
    are no longer necessary. (They may stil be useful when creating several
    copies of a single network.)

  - Inclusion of Observer pattern (rng7)

    Observers can now be added to models to monitor various parts of the code.
    This is a much cleaner solution than just adding print statements.

  - New integrator (rng7)

    lsodar is now used for the integration. lsodar provides native root-finding 
    support which both speeds and simplifies the code.

  - Handling of NaN (rsk23)

    If a cost call returns NaN, the cost is set to infinity. (This usually 
    represents a failure of the integrator.)

  - Replacement TeX and dot generators (rng7)

    Rolled our own python-to-TeX and network-to-dot converters. This removes
    any dependency on the 4suite library, and allows us to customize outputs.

.. topic:: Version 0.1

  - Import mechanisms

    The ``Model``, ``KeyedList``, ``Experiment``, ``ExperimentCollection``, and 
    ``CalculationCollection`` classes are now imported into the ``SloppyModels``
    namespace. Similarly, ``Network`` is imported into the 
    ``SloppyModels.ReactionNetworks`` namespace.
 
    A common usage pattern would be::

      import SloppyCell
      import SloppyCell.ReactionNetworks as RxnNets
      net = RxnNets.Network('example_net')
      calcColl = SloppyCell.CalculationCollection([net])
      m = SloppyCell.Model(exptColl, calcColl)
      params = SloppyCell.KeyedList([('A', 1.0),
                                     ('B', 2.0)])
  
    Unfortunately, this change breaks the old import pattern for ``Model`` and 
    ``Network``. The following no longer works::
  
      import SloppyCell.Model as Model
      import SloppyCell.ReactionNetworks.Network as Network
      net = Network.Network('example_net')
      m = Model.Model(exptColl, calcColl)
  
    For development purposes the ``Model`` and ``Network`` modules are imported
    as ``SloppyCell.Model_mod`` and ``SloppyCell.ReactionNetworks.Network_mod``.
    So, for example, if you change ``Model.py`` you can reload the changes 
    with::

      reload(SloppyCell.Model_mod); reload(SloppyCell).
    
    Additionally, all ``pylab`` functions have been imported into the 
    ``Plotting`` namespaces. So one can now just do::

      Plotting.plot_model_results(...)
      Plotting.show()
 
 
  - New plotting methods for ReactionNetworks

    ``ReactionNetworks.Plotting.plot_model_results`` is a much less kludgy 
    replacement for ``PlotTrajectoriesForExperiments``.
 
  - Support for sharing scale factors between measured variables in an expt

    Within a single experiment, a given measured variable will have the same 
    scale factor for all calculations. To further share that scale factor 
    between two measured variables use expt.set_shared_scale_factors. For 
    example, if A and B are to share scale factors, and B, C, and D are to share
    a different scale factor, use 
    ``expt.set_shared_scale_factors([['A', 'B'], ['C', 'D', 'E']])``.
 
  - Unification of naming conventions and docstrings

    For user and developer sanity, we're moving to a consistent function naming 
    style. Our guideline is `PEP 8 <http://www.python.org/peps/pep-0008.html>`_,
    although modules names will remain CamelCase. We're also working on writing
    docstrings for all our code, following
    `PEP 257 <http://www.python.org/peps/pep-0257.html>`_.
 
  - More formal testing

    We're trying to formalize our testing, using unit tests where applicable. 
    After installation run ``python test.py`` in the ``SloppyCell/Testing`` 
    directory.
